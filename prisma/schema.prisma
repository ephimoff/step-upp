// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  expires      DateTime
  userId       String
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model User {
  id            String       @id @default(cuid())
  name          String?
  email         String?      @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  profile       Profile?
  membership    Membership[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([identifier, token])
}

model Profile {
  id           String                @id @default(cuid())
  name         String
  slug         String                @unique
  email        String                @unique
  userpic      String?
  title        String?
  team         String?
  phone        String?
  twitter      String?
  linkedin     String?
  github       String?
  userId       String                @unique
  user         User                  @relation(fields: [userId], references: [id])
  competencies ProfileCompetencies[]
  skills       ProfileScores[]
  appraised    FeedbackScores[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Competency {
  id          String                @id @default(cuid())
  name        String
  skills      Skill[]
  profiles    ProfileCompetencies[]
  workspaceId String
  workspace   Workspace             @relation(fields: [workspaceId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Skill {
  id           String          @id @default(cuid())
  name         String
  competencyId String
  competency   Competency      @relation(fields: [competencyId], references: [id])
  scores       ProfileScores[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ProfileCompetencies {
  id           String      @id @default(cuid())
  profileId    String?
  profile      Profile?    @relation(fields: [profileId], references: [id])
  competencyId String?
  competency   Competency? @relation(fields: [competencyId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ProfileScores {
  profileId      String
  profile        Profile?         @relation(fields: [profileId], references: [id])
  skillId        String
  skill          Skill?           @relation(fields: [skillId], references: [id])
  score          Int?
  feedbackScores FeedbackScores[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([profileId, skillId])
}

model FeedbackScores {
  id                 String        @id @default(cuid())
  score              Int
  date               DateTime      @default(now())
  appraiserId        String
  appraiser          Profile       @relation(fields: [appraiserId], references: [id])
  appraiseeSkillId   String
  appraiseeProfileId String
  appraisee          ProfileScores @relation(fields: [appraiseeProfileId, appraiseeSkillId], references: [profileId, skillId])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model FeedbackAccessToken {
  identifier String
  token      String   @unique
  expires    DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([identifier, token])
}

model Workspace {
  id          String            @id @default(cuid())
  name        String
  description String?
  access      WorkspaceAccess[]
  members     Membership[]
  planId      String
  plan        Plan              @relation(fields: [planId], references: [id])
  competency  Competency[]
  packs       Packs[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// When anyone with an email address from these domains joins the app, 
// they will automatically join this workspace. It is recommended 
// to avoid removing domains from this list since otherwise new users 
// from these domains will be added to a separate new free workspace.
model WorkspaceAccess {
  // id          String    @id @default(cuid())
  domain      String    @id
  isActive    Boolean   @default(true)
  isPublic    Boolean   @default(false)
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Plan {
  id          String      @id @default(cuid())
  name        String      @unique
  description String?
  price       Float
  currency    String
  frequency   String
  workspace   Workspace[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum MembershipRole {
  MEMBER
  OWNER
}

model Membership {
  userId      String
  user        User           @relation(fields: [userId], references: [id])
  workspaceId String
  workspace   Workspace      @relation(fields: [workspaceId], references: [id])
  role        MembershipRole

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([userId, workspaceId])
}

model PublicDomain {
  domain String @id

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Packs {
  id          String    @id @default(cuid())
  packName    String    @unique
  isEnabled   Boolean   @default(false)
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// model Pack {
//   id           String             @id @default(cuid())
//   name         String
//   description  String
//   isEnabled    Boolean            @default(false)
//   competencies PackCompetencies[]

//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
// }

// model PackCompetencies {
//   id          String       @id @default(cuid())
//   name        String
//   description String
//   skills      PackSkills[]
//   packId      String
//   pack        Pack         @relation(fields: [packId], references: [id])

//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
// }

// model PackSkills {
//   id           String           @id @default(cuid())
//   name         String
//   competencyId String
//   competency   PackCompetencies @relation(fields: [competencyId], references: [id])

//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
// }
